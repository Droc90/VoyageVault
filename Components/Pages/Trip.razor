@page "/trip"
@inject HttpClient httpClient
@inject IHttpClientFactory httpClientFactory

@using Newtonsoft.Json
@using System.Text
@using VoyageVault.Components.Models

@rendermode InteractiveServer

<h3>Enter Voyage Expenses</h3>
@if (showJsonInput)
{
    <div>
        <textarea @bind="jsonInput" rows="10" cols="50"></textarea>
    </div>
    <button @onclick="CalculateOwedAmounts" disabled="@string.IsNullOrEmpty(jsonInput)">Calculate Owed Amounts</button>
}



@if (showTallyTable)
{
    <div>
        <div>
            <h4>Trip Information</h4>
            <p>Total Cost of Trip: $@totalTripCost</p>
            <p>Equal Shares of Cost: $@evenShare</p>
        </div>

        @foreach (var student in owedAmounts)
        {
            if(student.Value.Count > 1)
            {
            <p><b>@student.Key</b> paid $@student.Value["TotalPaid"] and owes:</p>
            <ul>
                @foreach (var debt in student.Value)
                {
                    if (debt.Key != "TotalPaid")
                    {
                        <li>@debt.Key: $@(debt.Value > 0 ? debt.Value : 0)</li>
                    }
                }
                </ul>
            }
            else if(student.Value.Count == 1)
            {
                <p><b>@student.Key</b> paid $@student.Value["TotalPaid"]</p>
            }
        }
        
    </div>
    
}

<button @onclick="CalculateOwedAmounts" hidden="@(!payments.Any())">Calculate Owed Amounts</button>
<Popup @ref="popupRef" />

<button @onclick="ResetPage" hidden="@(!showTallyTable)">OK</button>

@code {

    private string name;
    private decimal amountPaid;
    private List<Payment> payments = new List<Payment>();
    private bool showTallyTable = false;
    private Dictionary<string, Dictionary<string, decimal>> owedAmounts = new Dictionary<string, Dictionary<string, decimal>>();
    private string jsonInput;
    private decimal totalTripCost, evenShare;
    private string errorMessage = "";
    private Popup popupRef;
    private bool showJsonInput = true;

    private bool IsValidInput()
    {
        return !string.IsNullOrEmpty(name) && amountPaid > 0 ;
    }

    private void ResetPage()
    {
        jsonInput = string.Empty;
        showJsonInput = true;
        showTallyTable = false;
        totalTripCost = 0;
        evenShare = 0;
        owedAmounts.Clear();
    }

    private async Task CalculateOwedAmounts()
    {
        var client = httpClientFactory.CreateClient("MyApiClient");

        var response = await client.PostAsync("api/Voyage/", new StringContent(jsonInput, Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            dynamic jsonObject = JsonConvert.DeserializeObject(jsonResponse);
            totalTripCost = jsonObject.totalTripCost;
            evenShare = jsonObject.evenShare;


            owedAmounts = jsonObject["owedAmounts"].ToObject<Dictionary<string, Dictionary<string, decimal>>>();

            showTallyTable = true;
            showJsonInput = false;
        }
        else
        {
            popupRef.Show("Invalid JSON String");
            showJsonInput = true;
        }
    }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public void Show(string bodyText, string headerText = "")
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }
}
