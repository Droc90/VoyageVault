@page "/trip"
@inject HttpClient httpClient
@inject IHttpClientFactory httpClientFactory

@using Newtonsoft.Json
@using System.Text
@using VoyageVault.Components.Models

@rendermode InteractiveServer

<h3>Enter Voyage Expenses</h3>

<div>
    <textarea @bind="jsonInput" rows="10" cols="50"></textarea>
</div>
<button @onclick="CalculateOwedAmounts" disabled="@string.IsNullOrEmpty(jsonInput)">Calculate Owed Amounts</button>



@if (showTallyTable)
{
<div>
    <div>
        <h4>Trip Information</h4>
        <p>Total Cost of Trip: $@totalTripCost</p>
        <p>Equal Shares of Cost: $@evenShare</p>
    </div>

    @foreach (var student in owedAmounts)
    {
        if(student.Value.Count > 1)
        {
        <p>@student.Key paid $@student.Value["TotalPaid"] and owes:</p>
        <ul>
            @foreach (var debt in student.Value)
            {
                if (debt.Key != "TotalPaid")
                {
                    <li>@debt.Key: $@(debt.Value > 0 ? debt.Value : 0)</li>
                }
            }
        </ul>
        }
    }
</div>
}

<button @onclick="CalculateOwedAmounts" hidden="@(!payments.Any())">Calculate Owed Amounts</button>

@code {

    private string name;
    private decimal amountPaid;
    private List<Payment> payments = new List<Payment>();
    private bool showTallyTable = false;
    private Dictionary<string, Dictionary<string, decimal>> owedAmounts = new Dictionary<string, Dictionary<string, decimal>>();
    private string jsonInput;
    private decimal totalTripCost, evenShare;

    private bool IsValidInput()
    {
        return !string.IsNullOrEmpty(name) && amountPaid > 0 ;
    }

    private async Task CalculateOwedAmounts()
    {
        var client = httpClientFactory.CreateClient("MyApiClient");

        var response = await client.PostAsync("api/Voyage/", new StringContent(jsonInput, Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            dynamic jsonObject = JsonConvert.DeserializeObject(jsonResponse);
             totalTripCost = jsonObject.totalTripCost;
             evenShare = jsonObject.evenShare;


            owedAmounts = jsonObject["owedAmounts"].ToObject<Dictionary<string, Dictionary<string, decimal>>>();

            showTallyTable = true;
        }
        else
        {
            // Handle failure
        }
    }
}
